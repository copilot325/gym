// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Especificando PostgreSQL como la base de datos
  url      = env("DATABASE_URL")
}

// --- Tablas gestionadas por Better-Auth ---
// Asegurar que el modelo 'User' y otros modelos requeridos por Better-Auth se definan aquí.
// La integración con Prisma debe seguir la documentación de Better-Auth.
model User {
  id              String    @id @default(cuid())
  email           String    @unique
  hashedPassword  String
  emailVerified   Boolean   @default(false) // Campo para aprobación manual
  name            String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relaciones con Better-Auth
  sessions        Session[]
  accounts        Account[]

  // Relaciones
  createdMembers         Member[]         @relation("MemberCreatedBy")
  createdMembershipTypes MembershipType[] @relation("MembershipTypeCreatedBy")
  createdUserMemberships UserMembership[] @relation("UserMembershipCreatedBy")

  @@map("users")
}

// Tablas adicionales requeridas por Better-Auth
model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// --- Tablas Personalizadas de la Aplicación ---

model Member {
  id                  String    @id @default(cuid())
  firstName           String
  lastName            String
  age                 Int
  phone               String    @unique // Validar formato de Guatemala en el frontend
  firstEnrollmentDate DateTime  @default(now())
  lastRenewalDate     DateTime? // Se actualiza con cada nueva membresía
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relaciones
  creatorId           String
  creator             User      @relation("MemberCreatedBy", fields: [creatorId], references: [id])
  memberships         UserMembership[]

  @@map("members")
}

model MembershipType {
  id                  String    @id @default(cuid())
  name                String    @unique // Ej: DIARIA, SEMANAL, QUINCENAL, MENSUAL
  daysGranted         Int       // Días de validez que otorga
  price               Float     @default(0) // Precio de la membresía
  description         String?   // Descripción opcional
  isActive            Boolean   @default(true) // Para activar/desactivar tipos
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relaciones
  creatorId           String
  creator             User      @relation("MembershipTypeCreatedBy", fields: [creatorId], references: [id])
  userMemberships     UserMembership[]

  @@map("membership_types")
}

model UserMembership {
  id                String      @id @default(cuid())
  acquisitionDate   DateTime    @default(now())
  expirationDate    DateTime    // Calculado: acquisitionDate + daysGranted del MembershipType
  isActive          Boolean     @default(true) // Para marcar si está activa o cancelada
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relaciones
  memberId          String
  member            Member      @relation(fields: [memberId], references: [id], onDelete: Cascade)
  membershipTypeId  String
  membershipType    MembershipType @relation(fields: [membershipTypeId], references: [id])
  creatorId         String
  creator           User        @relation("UserMembershipCreatedBy", fields: [creatorId], references: [id])

  @@map("user_memberships")
}
